package kr.or.ddit.actor.staff.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;

import kr.or.ddit.actor.professor.service.ProfessorService;
import kr.or.ddit.actor.professor.service.ProfessorServiceImpl;
import kr.or.ddit.actor.staff.service.StaffService;
import kr.or.ddit.actor.staff.service.StaffServiceImpl;
import kr.or.ddit.actor.student.service.StudentService;
import kr.or.ddit.common.eunm.ServiceResult;
import kr.or.ddit.filter.utils.MultipartFile;
import kr.or.ddit.filter.utils.StandardMultipartHttpServletRequest;
import kr.or.ddit.mvc.ViewResolverComposite;
import kr.or.ddit.paging.BootstrapPaginationRenderer;
import kr.or.ddit.utils.PopulateUtils;
import kr.or.ddit.utils.ValidationUtils;
import kr.or.ddit.validate.grouphint.DeleteGroup;
import kr.or.ddit.validate.grouphint.InsertGroup;
import kr.or.ddit.vo.ClassVO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.PaginationInfo;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.SearchVO;
import kr.or.ddit.vo.StudentVO;

@MultipartConfig
@WebServlet("/staff/professor")
public class StaffProfessorDataControllerServlet extends HttpServlet {
	private StaffService service = new StaffServiceImpl();
	private ProfessorService professorService = new ProfessorServiceImpl();
	private final String STUDENT_IMG_FOLDER = "/resources/images/professor";
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String pageParam = req.getParameter("page");
		String searchTypeParam = req.getParameter("searchType");
		String searchWordParam = req.getParameter("searchWord");
		SearchVO simpleCondition = new SearchVO(searchTypeParam, searchWordParam);
		
		PaginationInfo<ProfessorVO> paging = new PaginationInfo<ProfessorVO>();
		paging.setRenderer(new BootstrapPaginationRenderer());
		paging.setSimpleCondition(simpleCondition);
		int currentPage = 1;
		if(StringUtils.isNumeric(pageParam)) {
			currentPage = Integer.parseInt(pageParam);
		}
		paging.setCurrentPage(currentPage);
		service.retrieveProfessorList(paging);
		req.setAttribute("paging", paging);
		
		String viewName = "/jsonView.view";
		req.getRequestDispatcher(viewName).forward(req, resp);
	}

	
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		if(req instanceof StandardMultipartHttpServletRequest) {
			MultipartFile file = ((StandardMultipartHttpServletRequest) req).getFile("proImage");
			String realPath = req.getServletContext().getRealPath(STUDENT_IMG_FOLDER);
			
			File imageFolder = new File(realPath);
			
			ProfessorVO proVo = new ProfessorVO();
			req.setAttribute("proVo", proVo);
			
			Map<String, String[]> parameterMap = req.getParameterMap();
			
			PopulateUtils.populate(proVo, parameterMap);
			
			String filename = UUID.randomUUID().toString();
			proVo.setProImg(filename);
			
			File dest = new File(imageFolder, filename);
			
			
			System.out.println(proVo.toString());
			
			Map<String, List<String>> errors = new HashMap<>();
			req.setAttribute("errors", errors);
			
			boolean valid = ValidationUtils.validate(proVo, errors, InsertGroup.class);
			
			String viewName = null;
			if(valid) {
				ServiceResult result = service.createProfessor(proVo);
				switch (result) {
				case DUPLICATED:
					req.setAttribute("message", "교수번호");
					viewName = "staff/professor";
					break;
				case OK:
					viewName = "redirect:/staff/professorList";
					break;								
				default:
					req.setAttribute("message", "서버 오류");
					viewName = "staff/professor";
					break;
				}
			}else {
				viewName = "staff/professor";
			}
			
			new ViewResolverComposite().resolveView(viewName, req, resp);
		}
	}
	
}

	
	
