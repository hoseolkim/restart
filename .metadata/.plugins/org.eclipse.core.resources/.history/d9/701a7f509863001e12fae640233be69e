<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.actor.staff.dao.StaffDAO">
	
	<resultMap type="StudentVO" id="studentMap" autoMapping="true">
		<association property="proVO" javaType="ProfessorVO" autoMapping="true" />
	</resultMap>	
	
	<sql id="whereProfessorFrag">
		<where>
			<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
				<choose>
					<when test="simpleCondition.searchType eq 'name'">
						INSTR(PRO_NAME, #{simpleCondition.searchWord} ) > 0
					</when>
					<when test="simpleCondition.searchType eq 'major'">
						INSTR(PRO_MAJOR, #{simpleCondition.searchWord} ) > 0
					</when>
					<otherwise>
						INSTR(PRO_NAME, #{simpleCondition.searchWord} ) > 0
					OR
						INSTR(PRO_MAJOR, #{simpleCondition.searchWord} ) > 0
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	<sql id="whereStudentFrag">
		<where>
			<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
				<choose>
					<when test="simpleCondition.searchType eq 'name'">
						INSTR(STD_NAME, #{simpleCondition.searchWord} ) > 0
					</when>
					<when test="simpleCondition.searchType eq 'address'">
						INSTR(STD_ADD, #{simpleCondition.searchWord} ) > 0
					</when>
					<otherwise>
						INSTR(STD_NAME, #{simpleCondition.searchWord} ) > 0
					OR
						INSTR(STD_ADD, #{simpleCondition.searchWord} ) > 0
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	
	<select id="selectStudentTotalCount" parameterType="PaginationInfo" resultType="int">
		SELECT COUNT(*)
		FROM STUDENT
		<include refid="whereStudentFrag" />
	</select>
	<select id="selectProfessorTotalCount" parameterType="PaginationInfo" resultType="int">
		SELECT COUNT(*)
		FROM PROFESSOR
		<include refid="whereProfessorFrag" />
	</select>
	
	
	<select id="selectStudentList" resultMap="studentMap" parameterType="PaginationInfo">
		SELECT DISTINCT STD_NO, STD_NAME
		, STD_ID, STD_TELNO, STD_ADD
		, A.PRO_CD, PRO_NAME
		FROM STUDENT A , PROFESSOR B
		WHERE A.PRO_CD=B.PRO_CD
		ORDER BY STD_NO
	</select>
	
	<insert id="insertStudent" parameterType="StudentVO">
		<selectKey order="BEFORE" resultType="string" keyProperty="stdNo">
			SELECT '23BB' || TO_CHAR(NVL(TO_NUMBER(MAX(SUBSTR(STD_NO, 5))), 0) + 1, 'FM000000') 
					AS NEW_STD_NO
			FROM STUDENT
		</selectKey>
		INSERT INTO student (
		    STD_NO, STD_NAME, STD_ID
		    , STD_TELNO, STD_ADD, PRO_CD
		) VALUES (
		    #{stdNo}, #{stdName}, #{stdId}
		    , #{stdTelno}, #{stdAdd}, #{proCd}
		)
	</insert>
	
	<delete id="deleteStudent" parameterType="string">
		DELETE FROM STUDENT
		WHERE STD_NO = #{stdNo}
	</delete>
	
	<select id="selectProfessorList" resultType="ProfessorVO" parameterType="PaginationInfo">
	SELECT
		A.*
	FROM
		(SELECT ROWNUM RNUM, PRO_CD, PRO_NAME, PRO_MAJOR, PRO_DEPTNO, PRO_TELNO
		FROM PROFESSOR
		<include refid="whereProfessorFrag" />
		) A
	<![CDATA[
	WHERE
			RNUM >= #{startRow}
		AND
			RNUM <= #{endRow}
	]]>
   </select>
     
   <delete id="deleteProffesor" parameterType="string">
      DELETE FROM PROFESSOR
      WHERE PRO_CD = #{proCd}
   </delete>

   <insert id="insertProfessor" parameterType="ProfessorVO">
     
       INSERT INTO PROFESSOR (PRO_CD, PRO_NAME, PRO_MAJOR, PRO_DEPTNO, PRO_TELNO)
       VALUES (#{proCd}, #{proName}, #{proMajor}, #{proDeptno}, #{proTelno})
   </insert>
	
</mapper>