package kr.or.ddit.actor.staff.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.StringUtils;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.actor.staff.dao.Others;
import kr.or.ddit.actor.staff.dao.OthersImpl;
import kr.or.ddit.actor.staff.service.StaffService;
import kr.or.ddit.actor.staff.service.StaffServiceImpl;
import kr.or.ddit.actor.student.service.StudentService;
import kr.or.ddit.common.eunm.ServiceResult;
import kr.or.ddit.filter.utils.MultipartFile;
import kr.or.ddit.filter.utils.StandardMultipartHttpServletRequest;
import kr.or.ddit.mvc.ViewResolverComposite;
import kr.or.ddit.paging.BootstrapPaginationRenderer;
import kr.or.ddit.utils.PopulateUtils;
import kr.or.ddit.utils.ValidationUtils;
import kr.or.ddit.validate.grouphint.InsertGroup;
import kr.or.ddit.vo.PaginationInfo;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.SearchVO;
import kr.or.ddit.vo.StudentVO;

@WebServlet("/staff/student")
public class StaffStudentDataControllerServlet extends HttpServlet {
	private StaffService service = new StaffServiceImpl();
	private StudentService studentService;
	
	private final String STUDENT_IMG_FOLDER = "/resources/images/student";
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		String pageParam = req.getParameter("page");
		String searchTypeParam = req.getParameter("searchType");
		String searchWordParam = req.getParameter("searchWord");
		SearchVO simpleCondition = new SearchVO(searchTypeParam, searchWordParam);
		PaginationInfo<StudentVO> paging = new PaginationInfo<StudentVO>();
		paging.setRenderer(new BootstrapPaginationRenderer());
		paging.setSimpleCondition(simpleCondition);
		int currentPage = 1;
		if(StringUtils.isNumeric(pageParam)) {
			currentPage = Integer.parseInt(pageParam);
		}
		paging.setCurrentPage(currentPage);
		
		service.retrieveStudentList(paging);
		req.setAttribute("paging", paging);
		
		String viewName = "/jsonView.view";
		req.getRequestDispatcher(viewName).forward(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		if(req instanceof StandardMultipartHttpServletRequest) {
			MultipartFile file = ((StandardMultipartHttpServletRequest) req).getFile("stdImg");
			String realPath = req.getServletContext().getRealPath(STUDENT_IMG_FOLDER);
			
			File imageFolder = new File(realPath);
			if(!imageFolder.exists()) {
				imageFolder.mkdirs();
			}
			StudentVO student = new StudentVO();
			req.setAttribute("student", student);
			Map<String, String[]> parameterMap = req.getParameterMap();
			PopulateUtils.populate(student, parameterMap);
			 
			
			String fileName = UUID.randomUUID().toString();
			File dest = new File(imageFolder, fileName);
			student.setStdImg(fileName);
			
			Map<String, List<String>> errors = new HashMap<>();
			req.setAttribute("errors", errors);
			
			boolean valid = ValidationUtils.validate(student, errors, InsertGroup.class);
			
			String viewName = null;
			if(valid) {
				ServiceResult result = service.createStudent(student);
				switch (result) {
				case DUPLICATED:
					req.setAttribute("message", "학번 중복");
					viewName = "staff/student";
					break;
				case OK:
					file.transferTo(dest);
					viewName = "redirect:/staff/student";
					break;								
				default:
					req.setAttribute("message", "서버 오류");
					viewName = "staff/student";
					break;
				}
			}else {
				viewName = "staff/student";
			}
			
			if(viewName.startsWith("redirect:")) {			
				String location = req.getContextPath() + viewName.substring("redirect:".length());			
				resp.sendRedirect(location);
				
			}else {
				req.getRequestDispatcher(viewName).forward(req, resp);
			}
		}
		
	}
	
}
